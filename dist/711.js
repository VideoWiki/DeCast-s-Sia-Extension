"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[711],{3711:(e,t,o)=>{o.r(t),o.d(t,{Dropdown:()=>At,HIDE_EVENT_MAP:()=>me,Menu:()=>zt,Popper:()=>Nt,PopperContent:()=>Lt,PopperMethods:()=>kt,PopperWrapper:()=>Ht,SHOW_EVENT_MAP:()=>fe,ThemeClass:()=>Mt,Tooltip:()=>Ot,TooltipDirective:()=>Rt,VClosePopper:()=>Pt,VTooltip:()=>Tt,createTooltip:()=>ut,default:()=>Bt,destroyTooltip:()=>ct,hideAllPoppers:()=>Le,install:()=>Et,options:()=>xt,placements:()=>ce,recomputeAllPoppers:()=>Ne,vClosePopper:()=>Ct,vTooltip:()=>St});var i=o(641),n=o(33),s=o(3751),r=o(953);const a=["start","end"],l=["top","right","bottom","left"].reduce(((e,t)=>e.concat(t,t+"-"+a[0],t+"-"+a[1])),[]),p=Math.min,d=Math.max,h=(Math.round,Math.floor,{left:"right",right:"left",bottom:"top",top:"bottom"}),u={start:"end",end:"start"};function c(e,t,o){return d(e,p(t,o))}function f(e,t){return"function"==typeof e?e(t):e}function m(e){return e.split("-")[0]}function g(e){return e.split("-")[1]}function w(e){return"x"===e?"y":"x"}function v(e){return"y"===e?"height":"width"}function y(e){return["top","bottom"].includes(m(e))?"y":"x"}function _(e){return w(y(e))}function $(e,t,o){void 0===o&&(o=!1);const i=g(e),n=_(e),s=v(n);let r="x"===n?i===(o?"end":"start")?"right":"left":"start"===i?"bottom":"top";return t.reference[s]>t.floating[s]&&(r=x(r)),[r,x(r)]}function b(e){return e.replace(/start|end/g,(e=>u[e]))}function x(e){return e.replace(/left|right|bottom|top/g,(e=>h[e]))}function T(e){return"number"!=typeof e?function(e){return{top:0,right:0,bottom:0,left:0,...e}}(e):{top:e,right:e,bottom:e,left:e}}function S(e){const{x:t,y:o,width:i,height:n}=e;return{width:i,height:n,top:o,left:t,right:t+i,bottom:o+n,x:t,y:o}}function P(e,t,o){let{reference:i,floating:n}=e;const s=y(t),r=_(t),a=v(r),l=m(t),p="y"===s,d=i.x+i.width/2-n.width/2,h=i.y+i.height/2-n.height/2,u=i[a]/2-n[a]/2;let c;switch(l){case"top":c={x:d,y:i.y-n.height};break;case"bottom":c={x:d,y:i.y+i.height};break;case"right":c={x:i.x+i.width,y:h};break;case"left":c={x:i.x-n.width,y:h};break;default:c={x:i.x,y:i.y}}switch(g(t)){case"start":c[r]-=u*(o&&p?-1:1);break;case"end":c[r]+=u*(o&&p?-1:1)}return c}async function C(e,t){var o;void 0===t&&(t={});const{x:i,y:n,platform:s,rects:r,elements:a,strategy:l}=e,{boundary:p="clippingAncestors",rootBoundary:d="viewport",elementContext:h="floating",altBoundary:u=!1,padding:c=0}=f(t,e),m=T(c),g=a[u?"floating"===h?"reference":"floating":h],w=S(await s.getClippingRect({element:null==(o=await(null==s.isElement?void 0:s.isElement(g)))||o?g:g.contextElement||await(null==s.getDocumentElement?void 0:s.getDocumentElement(a.floating)),boundary:p,rootBoundary:d,strategy:l})),v="floating"===h?{x:i,y:n,width:r.floating.width,height:r.floating.height}:r.reference,y=await(null==s.getOffsetParent?void 0:s.getOffsetParent(a.floating)),_=await(null==s.isElement?void 0:s.isElement(y))&&await(null==s.getScale?void 0:s.getScale(y))||{x:1,y:1},$=S(s.convertOffsetParentRelativeRectToViewportRelativeRect?await s.convertOffsetParentRelativeRectToViewportRelativeRect({elements:a,rect:v,offsetParent:y,strategy:l}):v);return{top:(w.top-$.top+m.top)/_.y,bottom:($.bottom-w.bottom+m.bottom)/_.y,left:(w.left-$.left+m.left)/_.x,right:($.right-w.right+m.right)/_.x}}function A(e){var t;return(null==(t=e.ownerDocument)?void 0:t.defaultView)||window}function z(e){return A(e).getComputedStyle(e)}const N=Math.min,L=Math.max,k=Math.round;function H(e){const t=z(e);let o=parseFloat(t.width),i=parseFloat(t.height);const n=e.offsetWidth,s=e.offsetHeight,r=k(o)!==n||k(i)!==s;return r&&(o=n,i=s),{width:o,height:i,fallback:r}}function M(e){return D(e)?(e.nodeName||"").toLowerCase():""}let O;function R(){if(O)return O;const e=navigator.userAgentData;return e&&Array.isArray(e.brands)?(O=e.brands.map((e=>e.brand+"/"+e.version)).join(" "),O):navigator.userAgent}function E(e){return e instanceof A(e).HTMLElement}function B(e){return e instanceof A(e).Element}function D(e){return e instanceof A(e).Node}function F(e){return"undefined"!=typeof ShadowRoot&&(e instanceof A(e).ShadowRoot||e instanceof ShadowRoot)}function I(e){const{overflow:t,overflowX:o,overflowY:i,display:n}=z(e);return/auto|scroll|overlay|hidden|clip/.test(t+i+o)&&!["inline","contents"].includes(n)}function W(e){return["table","td","th"].includes(M(e))}function j(e){const t=/firefox/i.test(R()),o=z(e),i=o.backdropFilter||o.WebkitBackdropFilter;return"none"!==o.transform||"none"!==o.perspective||!!i&&"none"!==i||t&&"filter"===o.willChange||t&&!!o.filter&&"none"!==o.filter||["transform","perspective"].some((e=>o.willChange.includes(e)))||["paint","layout","strict","content"].some((e=>{const t=o.contain;return null!=t&&t.includes(e)}))}function V(){return!/^((?!chrome|android).)*safari/i.test(R())}function G(e){return["html","body","#document"].includes(M(e))}function X(e){return B(e)?e:e.contextElement}const q={x:1,y:1};function Y(e){const t=X(e);if(!E(t))return q;const o=t.getBoundingClientRect(),{width:i,height:n,fallback:s}=H(t);let r=(s?k(o.width):o.width)/i,a=(s?k(o.height):o.height)/n;return r&&Number.isFinite(r)||(r=1),a&&Number.isFinite(a)||(a=1),{x:r,y:a}}function U(e,t,o,i){var n,s;void 0===t&&(t=!1),void 0===o&&(o=!1);const r=e.getBoundingClientRect(),a=X(e);let l=q;t&&(i?B(i)&&(l=Y(i)):l=Y(e));const p=a?A(a):window,d=!V()&&o;let h=(r.left+(d&&(null==(n=p.visualViewport)?void 0:n.offsetLeft)||0))/l.x,u=(r.top+(d&&(null==(s=p.visualViewport)?void 0:s.offsetTop)||0))/l.y,c=r.width/l.x,f=r.height/l.y;if(a){const e=A(a),t=i&&B(i)?A(i):i;let o=e.frameElement;for(;o&&i&&t!==e;){const e=Y(o),t=o.getBoundingClientRect(),i=getComputedStyle(o);t.x+=(o.clientLeft+parseFloat(i.paddingLeft))*e.x,t.y+=(o.clientTop+parseFloat(i.paddingTop))*e.y,h*=e.x,u*=e.y,c*=e.x,f*=e.y,h+=t.x,u+=t.y,o=A(o).frameElement}}return{width:c,height:f,top:u,right:h+c,bottom:u+f,left:h,x:h,y:u}}function K(e){return((D(e)?e.ownerDocument:e.document)||window.document).documentElement}function Q(e){return B(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function J(e){return U(K(e)).left+Q(e).scrollLeft}function Z(e){if("html"===M(e))return e;const t=e.assignedSlot||e.parentNode||F(e)&&e.host||K(e);return F(t)?t.host:t}function ee(e){const t=Z(e);return G(t)?t.ownerDocument.body:E(t)&&I(t)?t:ee(t)}function te(e,t){var o;void 0===t&&(t=[]);const i=ee(e),n=i===(null==(o=e.ownerDocument)?void 0:o.body),s=A(i);return n?t.concat(s,s.visualViewport||[],I(i)?i:[]):t.concat(i,te(i))}function oe(e,t,o){return"viewport"===t?S(function(e,t){const o=A(e),i=K(e),n=o.visualViewport;let s=i.clientWidth,r=i.clientHeight,a=0,l=0;if(n){s=n.width,r=n.height;const e=V();(e||!e&&"fixed"===t)&&(a=n.offsetLeft,l=n.offsetTop)}return{width:s,height:r,x:a,y:l}}(e,o)):B(t)?S(function(e,t){const o=U(e,!0,"fixed"===t),i=o.top+e.clientTop,n=o.left+e.clientLeft,s=E(e)?Y(e):{x:1,y:1};return{width:e.clientWidth*s.x,height:e.clientHeight*s.y,x:n*s.x,y:i*s.y}}(t,o)):S(function(e){const t=K(e),o=Q(e),i=e.ownerDocument.body,n=L(t.scrollWidth,t.clientWidth,i.scrollWidth,i.clientWidth),s=L(t.scrollHeight,t.clientHeight,i.scrollHeight,i.clientHeight);let r=-o.scrollLeft+J(e);const a=-o.scrollTop;return"rtl"===z(i).direction&&(r+=L(t.clientWidth,i.clientWidth)-n),{width:n,height:s,x:r,y:a}}(K(e)))}function ie(e){return E(e)&&"fixed"!==z(e).position?e.offsetParent:null}function ne(e){const t=A(e);let o=ie(e);for(;o&&W(o)&&"static"===z(o).position;)o=ie(o);return o&&("html"===M(o)||"body"===M(o)&&"static"===z(o).position&&!j(o))?t:o||function(e){let t=Z(e);for(;E(t)&&!G(t);){if(j(t))return t;t=Z(t)}return null}(e)||t}function se(e,t,o){const i=E(t),n=K(t),s=U(e,!0,"fixed"===o,t);let r={scrollLeft:0,scrollTop:0};const a={x:0,y:0};if(i||!i&&"fixed"!==o)if(("body"!==M(t)||I(n))&&(r=Q(t)),E(t)){const e=U(t,!0);a.x=e.x+t.clientLeft,a.y=e.y+t.clientTop}else n&&(a.x=J(n));return{x:s.left+r.scrollLeft-a.x,y:s.top+r.scrollTop-a.y,width:s.width,height:s.height}}const re={getClippingRect:function(e){let{element:t,boundary:o,rootBoundary:i,strategy:n}=e;const s="clippingAncestors"===o?function(e,t){const o=t.get(e);if(o)return o;let i=te(e).filter((e=>B(e)&&"body"!==M(e))),n=null;const s="fixed"===z(e).position;let r=s?Z(e):e;for(;B(r)&&!G(r);){const e=z(r),t=j(r);(s?t||n:t||"static"!==e.position||!n||!["absolute","fixed"].includes(n.position))?n=e:i=i.filter((e=>e!==r)),r=Z(r)}return t.set(e,i),i}(t,this._c):[].concat(o),r=[...s,i],a=r[0],l=r.reduce(((e,o)=>{const i=oe(t,o,n);return e.top=L(i.top,e.top),e.right=N(i.right,e.right),e.bottom=N(i.bottom,e.bottom),e.left=L(i.left,e.left),e}),oe(t,a,n));return{width:l.right-l.left,height:l.bottom-l.top,x:l.left,y:l.top}},convertOffsetParentRelativeRectToViewportRelativeRect:function(e){let{rect:t,offsetParent:o,strategy:i}=e;const n=E(o),s=K(o);if(o===s)return t;let r={scrollLeft:0,scrollTop:0},a={x:1,y:1};const l={x:0,y:0};if((n||!n&&"fixed"!==i)&&(("body"!==M(o)||I(s))&&(r=Q(o)),E(o))){const e=U(o);a=Y(o),l.x=e.x+o.clientLeft,l.y=e.y+o.clientTop}return{width:t.width*a.x,height:t.height*a.y,x:t.x*a.x-r.scrollLeft*a.x+l.x,y:t.y*a.y-r.scrollTop*a.y+l.y}},isElement:B,getDimensions:function(e){return E(e)?H(e):e.getBoundingClientRect()},getOffsetParent:ne,getDocumentElement:K,getScale:Y,async getElementRects(e){let{reference:t,floating:o,strategy:i}=e;const n=this.getOffsetParent||ne,s=this.getDimensions;return{reference:se(t,await n(o),i),floating:{x:0,y:0,...await s(o)}}},getClientRects:e=>Array.from(e.getClientRects()),isRTL:e=>"rtl"===z(e).direction};function ae(e,t){for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&("object"==typeof t[o]&&e[o]?ae(e[o],t[o]):e[o]=t[o])}const le={disabled:!1,distance:5,skidding:0,container:"body",boundary:void 0,instantMove:!1,disposeTimeout:150,popperTriggers:[],strategy:"absolute",preventOverflow:!0,flip:!0,shift:!0,overflowPadding:0,arrowPadding:0,arrowOverflow:!0,autoHideOnMousedown:!1,themes:{tooltip:{placement:"top",triggers:["hover","focus","touch"],hideTriggers:e=>[...e,"click"],delay:{show:200,hide:0},handleResize:!1,html:!1,loadingContent:"..."},dropdown:{placement:"bottom",triggers:["click"],delay:0,handleResize:!0,autoHide:!0},menu:{$extend:"dropdown",triggers:["hover","focus"],popperTriggers:["hover"],delay:{show:0,hide:400}}}};function pe(e,t){let o,i=le.themes[e]||{};do{o=i[t],typeof o>"u"?i.$extend?i=le.themes[i.$extend]||{}:(i=null,o=le[t]):i=null}while(i);return o}function de(e){const t=[e];let o=le.themes[e]||{};do{o.$extend?(t.push(o.$extend),o=le.themes[o.$extend]||{}):o=null}while(o);return t}let he=!1;if(typeof window<"u"){he=!1;try{const e=Object.defineProperty({},"passive",{get(){he=!0}});window.addEventListener("test",null,e)}catch{}}let ue=!1;typeof window<"u"&&typeof navigator<"u"&&(ue=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream);const ce=["auto","top","bottom","left","right"].reduce(((e,t)=>e.concat([t,`${t}-start`,`${t}-end`])),[]),fe={hover:"mouseenter",focus:"focus",click:"click",touch:"touchstart",pointer:"pointerdown"},me={hover:"mouseleave",focus:"blur",click:"click",touch:"touchend",pointer:"pointerup"};function ge(e,t){const o=e.indexOf(t);-1!==o&&e.splice(o,1)}function we(){return new Promise((e=>requestAnimationFrame((()=>{requestAnimationFrame(e)}))))}const ve=[];let ye=null;const _e={};function $e(e){let t=_e[e];return t||(t=_e[e]=[]),t}let be=function(){};function xe(e){return function(t){return pe(t.theme,e)}}typeof window<"u"&&(be=window.Element);const Te="__floating-vue__popper",Se=()=>(0,i.pM)({name:"VPopper",provide(){return{[Te]:{parentPopper:this}}},inject:{[Te]:{default:null}},props:{theme:{type:String,required:!0},targetNodes:{type:Function,required:!0},referenceNode:{type:Function,default:null},popperNode:{type:Function,required:!0},shown:{type:Boolean,default:!1},showGroup:{type:String,default:null},ariaId:{default:null},disabled:{type:Boolean,default:xe("disabled")},positioningDisabled:{type:Boolean,default:xe("positioningDisabled")},placement:{type:String,default:xe("placement"),validator:e=>ce.includes(e)},delay:{type:[String,Number,Object],default:xe("delay")},distance:{type:[Number,String],default:xe("distance")},skidding:{type:[Number,String],default:xe("skidding")},triggers:{type:Array,default:xe("triggers")},showTriggers:{type:[Array,Function],default:xe("showTriggers")},hideTriggers:{type:[Array,Function],default:xe("hideTriggers")},popperTriggers:{type:Array,default:xe("popperTriggers")},popperShowTriggers:{type:[Array,Function],default:xe("popperShowTriggers")},popperHideTriggers:{type:[Array,Function],default:xe("popperHideTriggers")},container:{type:[String,Object,be,Boolean],default:xe("container")},boundary:{type:[String,be],default:xe("boundary")},strategy:{type:String,validator:e=>["absolute","fixed"].includes(e),default:xe("strategy")},autoHide:{type:[Boolean,Function],default:xe("autoHide")},handleResize:{type:Boolean,default:xe("handleResize")},instantMove:{type:Boolean,default:xe("instantMove")},eagerMount:{type:Boolean,default:xe("eagerMount")},popperClass:{type:[String,Array,Object],default:xe("popperClass")},computeTransformOrigin:{type:Boolean,default:xe("computeTransformOrigin")},autoMinSize:{type:Boolean,default:xe("autoMinSize")},autoSize:{type:[Boolean,String],default:xe("autoSize")},autoMaxSize:{type:Boolean,default:xe("autoMaxSize")},autoBoundaryMaxSize:{type:Boolean,default:xe("autoBoundaryMaxSize")},preventOverflow:{type:Boolean,default:xe("preventOverflow")},overflowPadding:{type:[Number,String],default:xe("overflowPadding")},arrowPadding:{type:[Number,String],default:xe("arrowPadding")},arrowOverflow:{type:Boolean,default:xe("arrowOverflow")},flip:{type:Boolean,default:xe("flip")},shift:{type:Boolean,default:xe("shift")},shiftCrossAxis:{type:Boolean,default:xe("shiftCrossAxis")},noAutoFocus:{type:Boolean,default:xe("noAutoFocus")},disposeTimeout:{type:Number,default:xe("disposeTimeout")}},emits:{show:()=>!0,hide:()=>!0,"update:shown":e=>!0,"apply-show":()=>!0,"apply-hide":()=>!0,"close-group":()=>!0,"close-directive":()=>!0,"auto-hide":()=>!0,resize:()=>!0},data(){return{isShown:!1,isMounted:!1,skipTransition:!1,classes:{showFrom:!1,showTo:!1,hideFrom:!1,hideTo:!0},result:{x:0,y:0,placement:"",strategy:this.strategy,arrow:{x:0,y:0,centerOffset:0},transformOrigin:null},randomId:`popper_${[Math.random(),Date.now()].map((e=>e.toString(36).substring(2,10))).join("_")}`,shownChildren:new Set,lastAutoHide:!0,pendingHide:!1,containsGlobalTarget:!1,isDisposed:!0,mouseDownContains:!1}},computed:{popperId(){return null!=this.ariaId?this.ariaId:this.randomId},shouldMountContent(){return this.eagerMount||this.isMounted},slotData(){return{popperId:this.popperId,isShown:this.isShown,shouldMountContent:this.shouldMountContent,skipTransition:this.skipTransition,autoHide:"function"==typeof this.autoHide?this.lastAutoHide:this.autoHide,show:this.show,hide:this.hide,handleResize:this.handleResize,onResize:this.onResize,classes:{...this.classes,popperClass:this.popperClass},result:this.positioningDisabled?null:this.result,attrs:this.$attrs}},parentPopper(){var e;return null==(e=this[Te])?void 0:e.parentPopper},hasPopperShowTriggerHover(){var e,t;return(null==(e=this.popperTriggers)?void 0:e.includes("hover"))||(null==(t=this.popperShowTriggers)?void 0:t.includes("hover"))}},watch:{shown:"$_autoShowHide",disabled(e){e?this.dispose():this.init()},async container(){this.isShown&&(this.$_ensureTeleport(),await this.$_computePosition())},triggers:{handler:"$_refreshListeners",deep:!0},positioningDisabled:"$_refreshListeners",...["placement","distance","skidding","boundary","strategy","overflowPadding","arrowPadding","preventOverflow","shift","shiftCrossAxis","flip"].reduce(((e,t)=>(e[t]="$_computePosition",e)),{})},created(){this.autoMinSize&&console.warn('[floating-vue] `autoMinSize` option is deprecated. Use `autoSize="min"` instead.'),this.autoMaxSize&&console.warn("[floating-vue] `autoMaxSize` option is deprecated. Use `autoBoundaryMaxSize` instead.")},mounted(){this.init(),this.$_detachPopperNode()},activated(){this.$_autoShowHide()},deactivated(){this.hide()},beforeUnmount(){this.dispose()},methods:{show({event:e=null,skipDelay:t=!1,force:o=!1}={}){var i,n;null!=(i=this.parentPopper)&&i.lockedChild&&this.parentPopper.lockedChild!==this||(this.pendingHide=!1,(o||!this.disabled)&&((null==(n=this.parentPopper)?void 0:n.lockedChild)===this&&(this.parentPopper.lockedChild=null),this.$_scheduleShow(e,t),this.$emit("show"),this.$_showFrameLocked=!0,requestAnimationFrame((()=>{this.$_showFrameLocked=!1}))),this.$emit("update:shown",!0))},hide({event:e=null,skipDelay:t=!1}={}){var o;if(!this.$_hideInProgress){if(this.shownChildren.size>0)return void(this.pendingHide=!0);if(this.hasPopperShowTriggerHover&&this.$_isAimingPopper())return void(this.parentPopper&&(this.parentPopper.lockedChild=this,clearTimeout(this.parentPopper.lockedChildTimer),this.parentPopper.lockedChildTimer=setTimeout((()=>{this.parentPopper.lockedChild===this&&(this.parentPopper.lockedChild.hide({skipDelay:t}),this.parentPopper.lockedChild=null)}),1e3)));(null==(o=this.parentPopper)?void 0:o.lockedChild)===this&&(this.parentPopper.lockedChild=null),this.pendingHide=!1,this.$_scheduleHide(e,t),this.$emit("hide"),this.$emit("update:shown",!1)}},init(){var e;this.isDisposed&&(this.isDisposed=!1,this.isMounted=!1,this.$_events=[],this.$_preventShow=!1,this.$_referenceNode=(null==(e=this.referenceNode)?void 0:e.call(this))??this.$el,this.$_targetNodes=this.targetNodes().filter((e=>e.nodeType===e.ELEMENT_NODE)),this.$_popperNode=this.popperNode(),this.$_innerNode=this.$_popperNode.querySelector(".v-popper__inner"),this.$_arrowNode=this.$_popperNode.querySelector(".v-popper__arrow-container"),this.$_swapTargetAttrs("title","data-original-title"),this.$_detachPopperNode(),this.triggers.length&&this.$_addEventListeners(),this.shown&&this.show())},dispose(){this.isDisposed||(this.isDisposed=!0,this.$_removeEventListeners(),this.hide({skipDelay:!0}),this.$_detachPopperNode(),this.isMounted=!1,this.isShown=!1,this.$_updateParentShownChildren(!1),this.$_swapTargetAttrs("data-original-title","title"))},async onResize(){this.isShown&&(await this.$_computePosition(),this.$emit("resize"))},async $_computePosition(){if(this.isDisposed||this.positioningDisabled)return;const e={strategy:this.strategy,middleware:[]};(this.distance||this.skidding)&&e.middleware.push(function(e){return void 0===e&&(e=0),{name:"offset",options:e,async fn(t){var o,i;const{x:n,y:s,placement:r,middlewareData:a}=t,l=await async function(e,t){const{placement:o,platform:i,elements:n}=e,s=await(null==i.isRTL?void 0:i.isRTL(n.floating)),r=m(o),a=g(o),l="y"===y(o),p=["left","top"].includes(r)?-1:1,d=s&&l?-1:1,h=f(t,e);let{mainAxis:u,crossAxis:c,alignmentAxis:w}="number"==typeof h?{mainAxis:h,crossAxis:0,alignmentAxis:null}:{mainAxis:0,crossAxis:0,alignmentAxis:null,...h};return a&&"number"==typeof w&&(c="end"===a?-1*w:w),l?{x:c*d,y:u*p}:{x:u*p,y:c*d}}(t,e);return r===(null==(o=a.offset)?void 0:o.placement)&&null!=(i=a.arrow)&&i.alignmentOffset?{}:{x:n+l.x,y:s+l.y,data:{...l,placement:r}}}}}({mainAxis:this.distance,crossAxis:this.skidding}));const t=this.placement.startsWith("auto");if(t?e.middleware.push(function(e){return void 0===e&&(e={}),{name:"autoPlacement",options:e,async fn(t){var o,i,n;const{rects:s,middlewareData:r,placement:a,platform:p,elements:d}=t,{crossAxis:h=!1,alignment:u,allowedPlacements:c=l,autoAlignment:w=!0,...v}=f(e,t),y=void 0!==u||c===l?function(e,t,o){return(e?[...o.filter((t=>g(t)===e)),...o.filter((t=>g(t)!==e))]:o.filter((e=>m(e)===e))).filter((o=>!e||g(o)===e||!!t&&b(o)!==o))}(u||null,w,c):c,_=await C(t,v),x=(null==(o=r.autoPlacement)?void 0:o.index)||0,T=y[x];if(null==T)return{};const S=$(T,s,await(null==p.isRTL?void 0:p.isRTL(d.floating)));if(a!==T)return{reset:{placement:y[0]}};const P=[_[m(T)],_[S[0]],_[S[1]]],A=[...(null==(i=r.autoPlacement)?void 0:i.overflows)||[],{placement:T,overflows:P}],z=y[x+1];if(z)return{data:{index:x+1,overflows:A},reset:{placement:z}};const N=A.map((e=>{const t=g(e.placement);return[e.placement,t&&h?e.overflows.slice(0,2).reduce(((e,t)=>e+t),0):e.overflows[0],e.overflows]})).sort(((e,t)=>e[1]-t[1])),L=N.filter((e=>e[2].slice(0,g(e[0])?2:3).every((e=>e<=0)))),k=(null==(n=L[0])?void 0:n[0])||N[0][0];return k!==a?{data:{index:x+1,overflows:A},reset:{placement:k}}:{}}}}({alignment:this.placement.split("-")[1]??""})):e.placement=this.placement,this.preventOverflow&&(this.shift&&e.middleware.push((void 0===(o={padding:this.overflowPadding,boundary:this.boundary,crossAxis:this.shiftCrossAxis})&&(o={}),{name:"shift",options:o,async fn(e){const{x:t,y:i,placement:n}=e,{mainAxis:s=!0,crossAxis:r=!1,limiter:a={fn:e=>{let{x:t,y:o}=e;return{x:t,y:o}}},...l}=f(o,e),p={x:t,y:i},d=await C(e,l),h=y(m(n)),u=w(h);let g=p[u],v=p[h];if(s){const e="y"===u?"bottom":"right";g=c(g+d["y"===u?"top":"left"],g,g-d[e])}if(r){const e="y"===h?"bottom":"right";v=c(v+d["y"===h?"top":"left"],v,v-d[e])}const _=a.fn({...e,[u]:g,[h]:v});return{..._,data:{x:_.x-t,y:_.y-i}}}})),!t&&this.flip&&e.middleware.push(function(e){return void 0===e&&(e={}),{name:"flip",options:e,async fn(t){var o,i;const{placement:n,middlewareData:s,rects:r,initialPlacement:a,platform:l,elements:p}=t,{mainAxis:d=!0,crossAxis:h=!0,fallbackPlacements:u,fallbackStrategy:c="bestFit",fallbackAxisSideDirection:w="none",flipAlignment:v=!0,...y}=f(e,t);if(null!=(o=s.arrow)&&o.alignmentOffset)return{};const _=m(n),T=m(a)===a,S=await(null==l.isRTL?void 0:l.isRTL(p.floating)),P=u||(T||!v?[x(a)]:function(e){const t=x(e);return[b(e),t,b(t)]}(a));u||"none"===w||P.push(...function(e,t,o,i){const n=g(e);let s=function(e,t,o){const i=["left","right"],n=["right","left"],s=["top","bottom"],r=["bottom","top"];switch(e){case"top":case"bottom":return o?t?n:i:t?i:n;case"left":case"right":return t?s:r;default:return[]}}(m(e),"start"===o,i);return n&&(s=s.map((e=>e+"-"+n)),t&&(s=s.concat(s.map(b)))),s}(a,v,w,S));const A=[a,...P],z=await C(t,y),N=[];let L=(null==(i=s.flip)?void 0:i.overflows)||[];if(d&&N.push(z[_]),h){const e=$(n,r,S);N.push(z[e[0]],z[e[1]])}if(L=[...L,{placement:n,overflows:N}],!N.every((e=>e<=0))){var k,H;const e=((null==(k=s.flip)?void 0:k.index)||0)+1,t=A[e];if(t)return{data:{index:e,overflows:L},reset:{placement:t}};let o=null==(H=L.filter((e=>e.overflows[0]<=0)).sort(((e,t)=>e.overflows[1]-t.overflows[1]))[0])?void 0:H.placement;if(!o)switch(c){case"bestFit":{var M;const e=null==(M=L.map((e=>[e.placement,e.overflows.filter((e=>e>0)).reduce(((e,t)=>e+t),0)])).sort(((e,t)=>e[1]-t[1]))[0])?void 0:M[0];e&&(o=e);break}case"initialPlacement":o=a}if(n!==o)return{reset:{placement:o}}}return{}}}}({padding:this.overflowPadding,boundary:this.boundary}))),e.middleware.push((e=>({name:"arrow",options:e,async fn(t){const{x:o,y:i,placement:n,rects:s,platform:r,elements:a,middlewareData:l}=t,{element:d,padding:h=0}=f(e,t)||{};if(null==d)return{};const u=T(h),m={x:o,y:i},w=_(n),y=v(w),$=await r.getDimensions(d),b="y"===w,x=b?"top":"left",S=b?"bottom":"right",P=b?"clientHeight":"clientWidth",C=s.reference[y]+s.reference[w]-m[w]-s.floating[y],A=m[w]-s.reference[w],z=await(null==r.getOffsetParent?void 0:r.getOffsetParent(d));let N=z?z[P]:0;N&&await(null==r.isElement?void 0:r.isElement(z))||(N=a.floating[P]||s.floating[y]);const L=C/2-A/2,k=N/2-$[y]/2-1,H=p(u[x],k),M=p(u[S],k),O=H,R=N-$[y]-M,E=N/2-$[y]/2+L,B=c(O,E,R),D=!l.arrow&&null!=g(n)&&E!==B&&s.reference[y]/2-(E<O?H:M)-$[y]/2<0,F=D?E<O?E-O:E-R:0;return{[w]:m[w]+F,data:{[w]:B,centerOffset:E-B-F,...D&&{alignmentOffset:F}},reset:D}}}))({element:this.$_arrowNode,padding:this.arrowPadding})),this.arrowOverflow&&e.middleware.push({name:"arrowOverflow",fn:({placement:e,rects:t,middlewareData:o})=>{let i;const{centerOffset:n}=o.arrow;return i=e.startsWith("top")||e.startsWith("bottom")?Math.abs(n)>t.reference.width/2:Math.abs(n)>t.reference.height/2,{data:{overflow:i}}}}),this.autoMinSize||this.autoSize){const t=this.autoSize?this.autoSize:this.autoMinSize?"min":null;e.middleware.push({name:"autoSize",fn:({rects:e,placement:o,middlewareData:i})=>{var n;if(null!=(n=i.autoSize)&&n.skip)return{};let s,r;return o.startsWith("top")||o.startsWith("bottom")?s=e.reference.width:r=e.reference.height,this.$_innerNode.style["min"===t?"minWidth":"max"===t?"maxWidth":"width"]=null!=s?`${s}px`:null,this.$_innerNode.style["min"===t?"minHeight":"max"===t?"maxHeight":"height"]=null!=r?`${r}px`:null,{data:{skip:!0},reset:{rects:!0}}}})}var o;(this.autoMaxSize||this.autoBoundaryMaxSize)&&(this.$_innerNode.style.maxWidth=null,this.$_innerNode.style.maxHeight=null,e.middleware.push(function(e){return void 0===e&&(e={}),{name:"size",options:e,async fn(t){const{placement:o,rects:i,platform:n,elements:s}=t,{apply:r=(()=>{}),...a}=f(e,t),l=await C(t,a),h=m(o),u=g(o),c="y"===y(o),{width:w,height:v}=i.floating;let _,$;"top"===h||"bottom"===h?(_=h,$=u===(await(null==n.isRTL?void 0:n.isRTL(s.floating))?"start":"end")?"left":"right"):($=h,_="end"===u?"top":"bottom");const b=v-l.top-l.bottom,x=w-l.left-l.right,T=p(v-l[_],b),S=p(w-l[$],x),P=!t.middlewareData.shift;let A=T,z=S;if(c?z=u||P?p(S,x):x:A=u||P?p(T,b):b,P&&!u){const e=d(l.left,0),t=d(l.right,0),o=d(l.top,0),i=d(l.bottom,0);c?z=w-2*(0!==e||0!==t?e+t:d(l.left,l.right)):A=v-2*(0!==o||0!==i?o+i:d(l.top,l.bottom))}await r({...t,availableWidth:z,availableHeight:A});const N=await n.getDimensions(s.floating);return w!==N.width||v!==N.height?{reset:{rects:!0}}:{}}}}({boundary:this.boundary,padding:this.overflowPadding,apply:({availableWidth:e,availableHeight:t})=>{this.$_innerNode.style.maxWidth=null!=e?`${e}px`:null,this.$_innerNode.style.maxHeight=null!=t?`${t}px`:null}})));const i=await((e,t,o)=>{const i=new Map,n={platform:re,...o},s={...n.platform,_c:i};return(async(e,t,o)=>{const{placement:i="bottom",strategy:n="absolute",middleware:s=[],platform:r}=o,a=s.filter(Boolean),l=await(null==r.isRTL?void 0:r.isRTL(t));let p=await r.getElementRects({reference:e,floating:t,strategy:n}),{x:d,y:h}=P(p,i,l),u=i,c={},f=0;for(let o=0;o<a.length;o++){const{name:s,fn:m}=a[o],{x:g,y:w,data:v,reset:y}=await m({x:d,y:h,initialPlacement:i,placement:u,strategy:n,middlewareData:c,rects:p,platform:r,elements:{reference:e,floating:t}});d=null!=g?g:d,h=null!=w?w:h,c={...c,[s]:{...c[s],...v}},y&&f<=50&&(f++,"object"==typeof y&&(y.placement&&(u=y.placement),y.rects&&(p=!0===y.rects?await r.getElementRects({reference:e,floating:t,strategy:n}):y.rects),({x:d,y:h}=P(p,u,l))),o=-1)}return{x:d,y:h,placement:u,strategy:n,middlewareData:c}})(e,t,{...n,platform:s})})(this.$_referenceNode,this.$_popperNode,e);Object.assign(this.result,{x:i.x,y:i.y,placement:i.placement,strategy:i.strategy,arrow:{...i.middlewareData.arrow,...i.middlewareData.arrowOverflow}})},$_scheduleShow(e,t=!1){if(this.$_updateParentShownChildren(!0),this.$_hideInProgress=!1,clearTimeout(this.$_scheduleTimer),ye&&this.instantMove&&ye.instantMove&&ye!==this.parentPopper)return ye.$_applyHide(!0),void this.$_applyShow(!0);t?this.$_applyShow():this.$_scheduleTimer=setTimeout(this.$_applyShow.bind(this),this.$_computeDelay("show"))},$_scheduleHide(e,t=!1){this.shownChildren.size>0?this.pendingHide=!0:(this.$_updateParentShownChildren(!1),this.$_hideInProgress=!0,clearTimeout(this.$_scheduleTimer),this.isShown&&(ye=this),t?this.$_applyHide():this.$_scheduleTimer=setTimeout(this.$_applyHide.bind(this),this.$_computeDelay("hide")))},$_computeDelay(e){const t=this.delay;return parseInt(t&&t[e]||t||0)},async $_applyShow(e=!1){clearTimeout(this.$_disposeTimer),clearTimeout(this.$_scheduleTimer),this.skipTransition=e,!this.isShown&&(this.$_ensureTeleport(),await we(),await this.$_computePosition(),await this.$_applyShowEffect(),this.positioningDisabled||this.$_registerEventListeners([...te(this.$_referenceNode),...te(this.$_popperNode)],"scroll",(()=>{this.$_computePosition()})))},async $_applyShowEffect(){if(this.$_hideInProgress)return;if(this.computeTransformOrigin){const e=this.$_referenceNode.getBoundingClientRect(),t=this.$_popperNode.querySelector(".v-popper__wrapper"),o=t.parentNode.getBoundingClientRect(),i=e.x+e.width/2-(o.left+t.offsetLeft),n=e.y+e.height/2-(o.top+t.offsetTop);this.result.transformOrigin=`${i}px ${n}px`}this.isShown=!0,this.$_applyAttrsToTarget({"aria-describedby":this.popperId,"data-popper-shown":""});const e=this.showGroup;if(e){let t;for(let o=0;o<ve.length;o++)t=ve[o],t.showGroup!==e&&(t.hide(),t.$emit("close-group"))}ve.push(this),document.body.classList.add("v-popper--some-open");for(const e of de(this.theme))$e(e).push(this),document.body.classList.add(`v-popper--some-open--${e}`);this.$emit("apply-show"),this.classes.showFrom=!0,this.classes.showTo=!1,this.classes.hideFrom=!1,this.classes.hideTo=!1,await we(),this.classes.showFrom=!1,this.classes.showTo=!0,this.noAutoFocus||this.$_popperNode.focus()},async $_applyHide(e=!1){if(this.shownChildren.size>0)return this.pendingHide=!0,void(this.$_hideInProgress=!1);if(clearTimeout(this.$_scheduleTimer),!this.isShown)return;this.skipTransition=e,ge(ve,this),0===ve.length&&document.body.classList.remove("v-popper--some-open");for(const e of de(this.theme)){const t=$e(e);ge(t,this),0===t.length&&document.body.classList.remove(`v-popper--some-open--${e}`)}ye===this&&(ye=null),this.isShown=!1,this.$_applyAttrsToTarget({"aria-describedby":void 0,"data-popper-shown":void 0}),clearTimeout(this.$_disposeTimer);const t=this.disposeTimeout;null!==t&&(this.$_disposeTimer=setTimeout((()=>{this.$_popperNode&&(this.$_detachPopperNode(),this.isMounted=!1)}),t)),this.$_removeEventListeners("scroll"),this.$emit("apply-hide"),this.classes.showFrom=!1,this.classes.showTo=!1,this.classes.hideFrom=!0,this.classes.hideTo=!1,await we(),this.classes.hideFrom=!1,this.classes.hideTo=!0},$_autoShowHide(){this.shown?this.show():this.hide()},$_ensureTeleport(){if(this.isDisposed)return;let e=this.container;if("string"==typeof e?e=window.document.querySelector(e):!1===e&&(e=this.$_targetNodes[0].parentNode),!e)throw new Error("No container for popover: "+this.container);e.appendChild(this.$_popperNode),this.isMounted=!0},$_addEventListeners(){const e=e=>{this.isShown&&!this.$_hideInProgress||(e.usedByTooltip=!0,!this.$_preventShow&&this.show({event:e}))};this.$_registerTriggerListeners(this.$_targetNodes,fe,this.triggers,this.showTriggers,e),this.$_registerTriggerListeners([this.$_popperNode],fe,this.popperTriggers,this.popperShowTriggers,e);const t=e=>{e.usedByTooltip||this.hide({event:e})};this.$_registerTriggerListeners(this.$_targetNodes,me,this.triggers,this.hideTriggers,t),this.$_registerTriggerListeners([this.$_popperNode],me,this.popperTriggers,this.popperHideTriggers,t)},$_registerEventListeners(e,t,o){this.$_events.push({targetNodes:e,eventType:t,handler:o}),e.forEach((e=>e.addEventListener(t,o,he?{passive:!0}:void 0)))},$_registerTriggerListeners(e,t,o,i,n){let s=o;null!=i&&(s="function"==typeof i?i(s):i),s.forEach((o=>{const i=t[o];i&&this.$_registerEventListeners(e,i,n)}))},$_removeEventListeners(e){const t=[];this.$_events.forEach((o=>{const{targetNodes:i,eventType:n,handler:s}=o;e&&e!==n?t.push(o):i.forEach((e=>e.removeEventListener(n,s)))})),this.$_events=t},$_refreshListeners(){this.isDisposed||(this.$_removeEventListeners(),this.$_addEventListeners())},$_handleGlobalClose(e,t=!1){this.$_showFrameLocked||(this.hide({event:e}),e.closePopover?this.$emit("close-directive"):this.$emit("auto-hide"),t&&(this.$_preventShow=!0,setTimeout((()=>{this.$_preventShow=!1}),300)))},$_detachPopperNode(){this.$_popperNode.parentNode&&this.$_popperNode.parentNode.removeChild(this.$_popperNode)},$_swapTargetAttrs(e,t){for(const o of this.$_targetNodes){const i=o.getAttribute(e);i&&(o.removeAttribute(e),o.setAttribute(t,i))}},$_applyAttrsToTarget(e){for(const t of this.$_targetNodes)for(const o in e){const i=e[o];null==i?t.removeAttribute(o):t.setAttribute(o,i)}},$_updateParentShownChildren(e){let t=this.parentPopper;for(;t;)e?t.shownChildren.add(this.randomId):(t.shownChildren.delete(this.randomId),t.pendingHide&&t.hide()),t=t.parentPopper},$_isAimingPopper(){const e=this.$_referenceNode.getBoundingClientRect();if(Me>=e.left&&Me<=e.right&&Oe>=e.top&&Oe<=e.bottom){const e=this.$_popperNode.getBoundingClientRect(),t=Me-ke,o=Oe-He,i=e.left+e.width/2-ke+(e.top+e.height/2)-He+e.width+e.height,n=ke+t*i,s=He+o*i;return Re(ke,He,n,s,e.left,e.top,e.left,e.bottom)||Re(ke,He,n,s,e.left,e.top,e.right,e.top)||Re(ke,He,n,s,e.right,e.top,e.right,e.bottom)||Re(ke,He,n,s,e.left,e.bottom,e.right,e.bottom)}return!1}},render(){return this.$slots.default(this.slotData)}});if(typeof document<"u"&&typeof window<"u"){if(ue){const e=!he||{passive:!0,capture:!0};document.addEventListener("touchstart",(e=>Pe(e,!0)),e),document.addEventListener("touchend",(e=>Ce(e,!0)),e)}else window.addEventListener("mousedown",(e=>Pe(e,!1)),!0),window.addEventListener("click",(e=>Ce(e,!1)),!0);window.addEventListener("resize",Ne)}function Pe(e,t){if(le.autoHideOnMousedown)Ae(e,t);else for(let t=0;t<ve.length;t++){const o=ve[t];try{o.mouseDownContains=o.popperNode().contains(e.target)}catch{}}}function Ce(e,t){le.autoHideOnMousedown||Ae(e,t)}function Ae(e,t){const o={};for(let i=ve.length-1;i>=0;i--){const n=ve[i];try{const i=n.containsGlobalTarget=n.mouseDownContains||n.popperNode().contains(e.target);n.pendingHide=!1,requestAnimationFrame((()=>{if(n.pendingHide=!1,!o[n.randomId]&&ze(n,i,e)){if(n.$_handleGlobalClose(e,t),!e.closeAllPopover&&e.closePopover&&i){let e=n.parentPopper;for(;e;)o[e.randomId]=!0,e=e.parentPopper;return}let s=n.parentPopper;for(;s&&ze(s,s.containsGlobalTarget,e);)s.$_handleGlobalClose(e,t),s=s.parentPopper}}))}catch{}}}function ze(e,t,o){return o.closeAllPopover||o.closePopover&&t||function(e,t){if("function"==typeof e.autoHide){const o=e.autoHide(t);return e.lastAutoHide=o,o}return e.autoHide}(e,o)&&!t}function Ne(){for(let e=0;e<ve.length;e++)ve[e].$_computePosition()}function Le(){for(let e=0;e<ve.length;e++)ve[e].hide()}let ke=0,He=0,Me=0,Oe=0;function Re(e,t,o,i,n,s,r,a){const l=((r-n)*(t-s)-(a-s)*(e-n))/((a-s)*(o-e)-(r-n)*(i-t)),p=((o-e)*(t-s)-(i-t)*(e-n))/((a-s)*(o-e)-(r-n)*(i-t));return l>=0&&l<=1&&p>=0&&p<=1}typeof window<"u"&&window.addEventListener("mousemove",(e=>{ke=Me,He=Oe,Me=e.clientX,Oe=e.clientY}),he?{passive:!0}:void 0);const Ee=(e,t)=>{const o=e.__vccOpts||e;for(const[e,i]of t)o[e]=i;return o},Be=Ee({extends:Se()},[["render",function(e,t,o,s,r,a){return(0,i.uX)(),(0,i.CE)("div",{ref:"reference",class:(0,n.normalizeClass)(["v-popper",{"v-popper--shown":e.slotData.isShown}])},[(0,i.RG)(e.$slots,"default",(0,n.normalizeProps)((0,i.Ng)(e.slotData)))],2)}]]);let De;function Fe(){Fe.init||(Fe.init=!0,De=-1!==function(){var e=window.navigator.userAgent,t=e.indexOf("MSIE ");if(t>0)return parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(e.indexOf("Trident/")>0){var o=e.indexOf("rv:");return parseInt(e.substring(o+3,e.indexOf(".",o)),10)}var i=e.indexOf("Edge/");return i>0?parseInt(e.substring(i+5,e.indexOf(".",i)),10):-1}())}var Ie={name:"ResizeObserver",props:{emitOnMount:{type:Boolean,default:!1},ignoreWidth:{type:Boolean,default:!1},ignoreHeight:{type:Boolean,default:!1}},emits:["notify"],mounted(){Fe(),(0,i.dY)((()=>{this._w=this.$el.offsetWidth,this._h=this.$el.offsetHeight,this.emitOnMount&&this.emitSize()}));const e=document.createElement("object");this._resizeObject=e,e.setAttribute("aria-hidden","true"),e.setAttribute("tabindex",-1),e.onload=this.addResizeHandlers,e.type="text/html",De&&this.$el.appendChild(e),e.data="about:blank",De||this.$el.appendChild(e)},beforeUnmount(){this.removeResizeHandlers()},methods:{compareAndNotify(){(!this.ignoreWidth&&this._w!==this.$el.offsetWidth||!this.ignoreHeight&&this._h!==this.$el.offsetHeight)&&(this._w=this.$el.offsetWidth,this._h=this.$el.offsetHeight,this.emitSize())},emitSize(){this.$emit("notify",{width:this._w,height:this._h})},addResizeHandlers(){this._resizeObject.contentDocument.defaultView.addEventListener("resize",this.compareAndNotify),this.compareAndNotify()},removeResizeHandlers(){this._resizeObject&&this._resizeObject.onload&&(!De&&this._resizeObject.contentDocument&&this._resizeObject.contentDocument.defaultView.removeEventListener("resize",this.compareAndNotify),this.$el.removeChild(this._resizeObject),this._resizeObject.onload=null,this._resizeObject=null)}}};const We=(0,i.YY)("data-v-b329ee4c");(0,i.Qi)("data-v-b329ee4c");const je={class:"resize-observer",tabindex:"-1"};(0,i.jt)();const Ve=We(((e,t,o,n,s,r)=>((0,i.uX)(),(0,i.Wv)("div",je))));Ie.render=Ve,Ie.__scopeId="data-v-b329ee4c",Ie.__file="src/components/ResizeObserver.vue";const Ge=(e="theme")=>({computed:{themeClass(){return function(e){const t=[e];let o=le.themes[e]||{};do{o.$extend&&!o.$resetCss?(t.push(o.$extend),o=le.themes[o.$extend]||{}):o=null}while(o);return t.map((e=>`v-popper--theme-${e}`))}(this[e])}}}),Xe=(0,i.pM)({name:"VPopperContent",components:{ResizeObserver:Ie},mixins:[Ge()],props:{popperId:String,theme:String,shown:Boolean,mounted:Boolean,skipTransition:Boolean,autoHide:Boolean,handleResize:Boolean,classes:Object,result:Object},emits:["hide","resize"],methods:{toPx:e=>null==e||isNaN(e)?null:`${e}px`}}),qe=["id","aria-hidden","tabindex","data-popper-placement"],Ye={ref:"inner",class:"v-popper__inner"},Ue=[(0,i.Lk)("div",{class:"v-popper__arrow-outer"},null,-1),(0,i.Lk)("div",{class:"v-popper__arrow-inner"},null,-1)],Ke=Ee(Xe,[["render",function(e,t,o,r,a,l){const p=(0,i.g2)("ResizeObserver");return(0,i.uX)(),(0,i.CE)("div",{id:e.popperId,ref:"popover",class:(0,n.normalizeClass)(["v-popper__popper",[e.themeClass,e.classes.popperClass,{"v-popper__popper--shown":e.shown,"v-popper__popper--hidden":!e.shown,"v-popper__popper--show-from":e.classes.showFrom,"v-popper__popper--show-to":e.classes.showTo,"v-popper__popper--hide-from":e.classes.hideFrom,"v-popper__popper--hide-to":e.classes.hideTo,"v-popper__popper--skip-transition":e.skipTransition,"v-popper__popper--arrow-overflow":e.result&&e.result.arrow.overflow,"v-popper__popper--no-positioning":!e.result}]]),style:(0,n.normalizeStyle)(e.result?{position:e.result.strategy,transform:`translate3d(${Math.round(e.result.x)}px,${Math.round(e.result.y)}px,0)`}:void 0),"aria-hidden":e.shown?"false":"true",tabindex:e.autoHide?0:void 0,"data-popper-placement":e.result?e.result.placement:void 0,onKeyup:t[2]||(t[2]=(0,s.withKeys)((t=>e.autoHide&&e.$emit("hide")),["esc"]))},[(0,i.Lk)("div",{class:"v-popper__backdrop",onClick:t[0]||(t[0]=t=>e.autoHide&&e.$emit("hide"))}),(0,i.Lk)("div",{class:"v-popper__wrapper",style:(0,n.normalizeStyle)(e.result?{transformOrigin:e.result.transformOrigin}:void 0)},[(0,i.Lk)("div",Ye,[e.mounted?((0,i.uX)(),(0,i.CE)(i.FK,{key:0},[(0,i.Lk)("div",null,[(0,i.RG)(e.$slots,"default")]),e.handleResize?((0,i.uX)(),(0,i.Wv)(p,{key:0,onNotify:t[1]||(t[1]=t=>e.$emit("resize",t))})):(0,i.Q3)("",!0)],64)):(0,i.Q3)("",!0)],512),(0,i.Lk)("div",{ref:"arrow",class:"v-popper__arrow-container",style:(0,n.normalizeStyle)(e.result?{left:e.toPx(e.result.arrow.x),top:e.toPx(e.result.arrow.y)}:void 0)},Ue,4)],4)],46,qe)}]]),Qe={methods:{show(...e){return this.$refs.popper.show(...e)},hide(...e){return this.$refs.popper.hide(...e)},dispose(...e){return this.$refs.popper.dispose(...e)},onResize(...e){return this.$refs.popper.onResize(...e)}}};let Je=function(){};typeof window<"u"&&(Je=window.Element);const Ze=Ee((0,i.pM)({name:"VPopperWrapper",components:{Popper:Be,PopperContent:Ke},mixins:[Qe,Ge("finalTheme")],props:{theme:{type:String,default:null},referenceNode:{type:Function,default:null},shown:{type:Boolean,default:!1},showGroup:{type:String,default:null},ariaId:{default:null},disabled:{type:Boolean,default:void 0},positioningDisabled:{type:Boolean,default:void 0},placement:{type:String,default:void 0},delay:{type:[String,Number,Object],default:void 0},distance:{type:[Number,String],default:void 0},skidding:{type:[Number,String],default:void 0},triggers:{type:Array,default:void 0},showTriggers:{type:[Array,Function],default:void 0},hideTriggers:{type:[Array,Function],default:void 0},popperTriggers:{type:Array,default:void 0},popperShowTriggers:{type:[Array,Function],default:void 0},popperHideTriggers:{type:[Array,Function],default:void 0},container:{type:[String,Object,Je,Boolean],default:void 0},boundary:{type:[String,Je],default:void 0},strategy:{type:String,default:void 0},autoHide:{type:[Boolean,Function],default:void 0},handleResize:{type:Boolean,default:void 0},instantMove:{type:Boolean,default:void 0},eagerMount:{type:Boolean,default:void 0},popperClass:{type:[String,Array,Object],default:void 0},computeTransformOrigin:{type:Boolean,default:void 0},autoMinSize:{type:Boolean,default:void 0},autoSize:{type:[Boolean,String],default:void 0},autoMaxSize:{type:Boolean,default:void 0},autoBoundaryMaxSize:{type:Boolean,default:void 0},preventOverflow:{type:Boolean,default:void 0},overflowPadding:{type:[Number,String],default:void 0},arrowPadding:{type:[Number,String],default:void 0},arrowOverflow:{type:Boolean,default:void 0},flip:{type:Boolean,default:void 0},shift:{type:Boolean,default:void 0},shiftCrossAxis:{type:Boolean,default:void 0},noAutoFocus:{type:Boolean,default:void 0},disposeTimeout:{type:Number,default:void 0}},emits:{show:()=>!0,hide:()=>!0,"update:shown":e=>!0,"apply-show":()=>!0,"apply-hide":()=>!0,"close-group":()=>!0,"close-directive":()=>!0,"auto-hide":()=>!0,resize:()=>!0},computed:{finalTheme(){return this.theme??this.$options.vPopperTheme}},methods:{getTargetNodes(){return Array.from(this.$el.children).filter((e=>e!==this.$refs.popperContent.$el))}}}),[["render",function(e,t,o,n,s,r){const a=(0,i.g2)("PopperContent"),l=(0,i.g2)("Popper");return(0,i.uX)(),(0,i.Wv)(l,(0,i.v6)({ref:"popper"},e.$props,{theme:e.finalTheme,"target-nodes":e.getTargetNodes,"popper-node":()=>e.$refs.popperContent.$el,class:[e.themeClass],onShow:t[0]||(t[0]=()=>e.$emit("show")),onHide:t[1]||(t[1]=()=>e.$emit("hide")),"onUpdate:shown":t[2]||(t[2]=t=>e.$emit("update:shown",t)),onApplyShow:t[3]||(t[3]=()=>e.$emit("apply-show")),onApplyHide:t[4]||(t[4]=()=>e.$emit("apply-hide")),onCloseGroup:t[5]||(t[5]=()=>e.$emit("close-group")),onCloseDirective:t[6]||(t[6]=()=>e.$emit("close-directive")),onAutoHide:t[7]||(t[7]=()=>e.$emit("auto-hide")),onResize:t[8]||(t[8]=()=>e.$emit("resize"))}),{default:(0,i.k6)((({popperId:t,isShown:o,shouldMountContent:n,skipTransition:s,autoHide:r,show:l,hide:p,handleResize:d,onResize:h,classes:u,result:c})=>[(0,i.RG)(e.$slots,"default",{shown:o,show:l,hide:p}),(0,i.bF)(a,{ref:"popperContent","popper-id":t,theme:e.finalTheme,shown:o,mounted:n,"skip-transition":s,"auto-hide":r,"handle-resize":d,classes:u,result:c,onHide:p,onResize:h},{default:(0,i.k6)((()=>[(0,i.RG)(e.$slots,"popper",{shown:o,hide:p})])),_:2},1032,["popper-id","theme","shown","mounted","skip-transition","auto-hide","handle-resize","classes","result","onHide","onResize"])])),_:3},16,["theme","target-nodes","popper-node","class"])}]]),et={...Ze,name:"VDropdown",vPopperTheme:"dropdown"},tt={...Ze,name:"VMenu",vPopperTheme:"menu"},ot={...Ze,name:"VTooltip",vPopperTheme:"tooltip"},it=(0,i.pM)({name:"VTooltipDirective",components:{Popper:Se(),PopperContent:Ke},mixins:[Qe],inheritAttrs:!1,props:{theme:{type:String,default:"tooltip"},html:{type:Boolean,default:e=>pe(e.theme,"html")},content:{type:[String,Number,Function],default:null},loadingContent:{type:String,default:e=>pe(e.theme,"loadingContent")},targetNodes:{type:Function,required:!0}},data:()=>({asyncContent:null}),computed:{isContentAsync(){return"function"==typeof this.content},loading(){return this.isContentAsync&&null==this.asyncContent},finalContent(){return this.isContentAsync?this.loading?this.loadingContent:this.asyncContent:this.content}},watch:{content:{handler(){this.fetchContent(!0)},immediate:!0},async finalContent(){await this.$nextTick(),this.$refs.popper.onResize()}},created(){this.$_fetchId=0},methods:{fetchContent(e){if("function"==typeof this.content&&this.$_isShown&&(e||!this.$_loading&&null==this.asyncContent)){this.asyncContent=null,this.$_loading=!0;const e=++this.$_fetchId,t=this.content(this);t.then?t.then((t=>this.onResult(e,t))):this.onResult(e,t)}},onResult(e,t){e===this.$_fetchId&&(this.$_loading=!1,this.asyncContent=t)},onShow(){this.$_isShown=!0,this.fetchContent()},onHide(){this.$_isShown=!1}}}),nt=["innerHTML"],st=["textContent"],rt=Ee(it,[["render",function(e,t,o,s,r,a){const l=(0,i.g2)("PopperContent"),p=(0,i.g2)("Popper");return(0,i.uX)(),(0,i.Wv)(p,(0,i.v6)({ref:"popper"},e.$attrs,{theme:e.theme,"target-nodes":e.targetNodes,"popper-node":()=>e.$refs.popperContent.$el,onApplyShow:e.onShow,onApplyHide:e.onHide}),{default:(0,i.k6)((({popperId:t,isShown:o,shouldMountContent:s,skipTransition:r,autoHide:a,hide:p,handleResize:d,onResize:h,classes:u,result:c})=>[(0,i.bF)(l,{ref:"popperContent",class:(0,n.normalizeClass)({"v-popper--tooltip-loading":e.loading}),"popper-id":t,theme:e.theme,shown:o,mounted:s,"skip-transition":r,"auto-hide":a,"handle-resize":d,classes:u,result:c,onHide:p,onResize:h},{default:(0,i.k6)((()=>[e.html?((0,i.uX)(),(0,i.CE)("div",{key:0,innerHTML:e.finalContent},null,8,nt)):((0,i.uX)(),(0,i.CE)("div",{key:1,textContent:(0,n.toDisplayString)(e.finalContent)},null,8,st))])),_:2},1032,["class","popper-id","theme","shown","mounted","skip-transition","auto-hide","handle-resize","classes","result","onHide","onResize"])])),_:1},16,["theme","target-nodes","popper-node","onApplyShow","onApplyHide"])}]]),at="v-popper--has-tooltip";function lt(e,t,o){let i;const n=typeof t;return i="string"===n?{content:t}:t&&"object"===n?t:{content:!1},i.placement=function(e,t){let o=e.placement;if(!o&&t)for(const e of ce)t[e]&&(o=e);return o||(o=pe(e.theme||"tooltip","placement")),o}(i,o),i.targetNodes=()=>[e],i.referenceNode=()=>e,i}let pt,dt,ht=0;function ut(e,t,o){!function(){if(pt)return;dt=(0,r.KR)([]),pt=(0,s.createApp)({name:"VTooltipDirectiveApp",setup:()=>({directives:dt}),render(){return this.directives.map((e=>(0,i.h)(rt,{...e.options,shown:e.shown||e.options.shown,key:e.id})))},devtools:{hide:!0}});const e=document.createElement("div");document.body.appendChild(e),pt.mount(e)}();const n=(0,r.KR)(lt(e,t,o)),a=(0,r.KR)(!1),l={id:ht++,options:n,shown:a};return dt.value.push(l),e.classList&&e.classList.add(at),e.$_popper={options:n,item:l,show(){a.value=!0},hide(){a.value=!1}}}function ct(e){if(e.$_popper){const t=dt.value.indexOf(e.$_popper.item);-1!==t&&dt.value.splice(t,1),delete e.$_popper,delete e.$_popperOldShown,delete e.$_popperMountTarget}e.classList&&e.classList.remove(at)}function ft(e,{value:t,modifiers:o}){const i=lt(e,t,o);if(!i.content||pe(i.theme||"tooltip","disabled"))ct(e);else{let n;e.$_popper?(n=e.$_popper,n.options.value=i):n=ut(e,t,o),typeof t.shown<"u"&&t.shown!==e.$_popperOldShown&&(e.$_popperOldShown=t.shown,t.shown?n.show():n.hide())}}const mt={beforeMount:ft,updated:ft,beforeUnmount(e){ct(e)}};function gt(e){e.addEventListener("mousedown",vt),e.addEventListener("click",vt),e.addEventListener("touchstart",yt,!!he&&{passive:!0})}function wt(e){e.removeEventListener("mousedown",vt),e.removeEventListener("click",vt),e.removeEventListener("touchstart",yt),e.removeEventListener("touchend",_t),e.removeEventListener("touchcancel",$t)}function vt(e){const t=e.currentTarget;e.closePopover=!t.$_vclosepopover_touch,e.closeAllPopover=t.$_closePopoverModifiers&&!!t.$_closePopoverModifiers.all}function yt(e){if(1===e.changedTouches.length){const t=e.currentTarget;t.$_vclosepopover_touch=!0;const o=e.changedTouches[0];t.$_vclosepopover_touchPoint=o,t.addEventListener("touchend",_t),t.addEventListener("touchcancel",$t)}}function _t(e){const t=e.currentTarget;if(t.$_vclosepopover_touch=!1,1===e.changedTouches.length){const o=e.changedTouches[0],i=t.$_vclosepopover_touchPoint;e.closePopover=Math.abs(o.screenY-i.screenY)<20&&Math.abs(o.screenX-i.screenX)<20,e.closeAllPopover=t.$_closePopoverModifiers&&!!t.$_closePopoverModifiers.all}}function $t(e){e.currentTarget.$_vclosepopover_touch=!1}const bt={beforeMount(e,{value:t,modifiers:o}){e.$_closePopoverModifiers=o,(typeof t>"u"||t)&&gt(e)},updated(e,{value:t,oldValue:o,modifiers:i}){e.$_closePopoverModifiers=i,t!==o&&(typeof t>"u"||t?gt(e):wt(e))},beforeUnmount(e){wt(e)}},xt=le,Tt=mt,St=mt,Pt=bt,Ct=bt,At=et,zt=tt,Nt=Se,Lt=Ke,kt=Qe,Ht=Ze,Mt=Ge,Ot=ot,Rt=rt;function Et(e,t={}){e.$_vTooltipInstalled||(e.$_vTooltipInstalled=!0,ae(le,t),e.directive("tooltip",mt),e.directive("close-popper",bt),e.component("VTooltip",ot),e.component("VDropdown",et),e.component("VMenu",tt))}const Bt={version:"5.2.2",install:Et,options:le}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,